#!/usr/bin/python3
import argparse
import logging
import random
import re
import string
import sys
import time
from datetime import datetime

import requests
import toml

# logger
################################
logger = logging.getLogger()
logger.setLevel(logging.ERROR)
formatter = logging.Formatter(
    "%(asctime)s [WARP_PLUS] %(message)s", "[%Y/%m/%d %H:%M:%S]"
)
stream_handler = logging.StreamHandler()
stream_handler.setFormatter(formatter)
logger.addHandler(stream_handler)

# argparser
################################
parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(title="commands", dest="commands")
run_parser = subparsers.add_parser("run", help="Get WARP+ Quota")
update_parser = subparsers.add_parser("update", help="Update Private Key")
parser.add_argument(
    "--config",
    dest="config",
    default="/config/wgcf-account.toml",
    help="Set wgcf-account.toml location",
)
parser.add_argument(
    "-v", "--verbose", dest="verbose", action="store_true", help="Verbose"
)
args = parser.parse_args()


def genString(stringLength):
    letters = string.ascii_letters + string.digits
    return "".join(random.choice(letters) for _ in range(stringLength))


def digitString(stringLength):
    digit = string.digits
    return "".join((random.choice(digit) for _ in range(stringLength)))


url = f"https://api.cloudflareclient.com/v0a{digitString(3)}/reg"


def _run(config: dict, max_retries: int = 0):
    headers = {
        "Content-Type": "application/json; charset=UTF-8",
        "Host": "api.cloudflareclient.com",
        "Connection": "Keep-Alive",
        "Accept-Encoding": "gzip",
        "User-Agent": "okhttp/3.12.1",
    }

    status_code = None
    exception = None
    for retry_num in range(max_retries + 1):
        if retry_num > 0:
            sleep_min = min(30, 2**retry_num * 1)
            logger.info(
                "Sleeping %d minutes before retry %d of %d for getting quota after %s",
                sleep_min,
                retry_num,
                max_retries,
                str(exception) if exception else "exception",
            )
            time.sleep(sleep_min * 60)

        try:
            exception = None
            install_id = genString(22)
            data = {
                "key": f"{genString(43)}=",
                "install_id": install_id,
                "fcm_token": f"{install_id}:APA91b{genString(134)}",
                "referrer": config["device_id"],
                "warp_enabled": False,
                "tos": datetime.now().isoformat()[:-3] + "+02:00",
                "type": "Android",
                "locale": "es_ES",
            }
            res = requests.post(url, json=data, headers=headers, timeout=10)
            status_code = res.status_code
            res.raise_for_status()
        except Exception as exc:
            exception = exc
            if status_code not in [429, 500, 502, 503, 504, 509]:
                logger.error(exc)
                break  # fatal error
            if retry_num == max_retries:
                logger.error(exc)
        else:
            break  # no error

    return status_code


def run():
    with open(args.config, encoding="utf-8") as f:
        conf = toml.load(f)
    return _run(conf, max_retries=10)


def getquota():
    while True:
        result = run()
        if result == 200:
            logger.info("Free 1GB added!")
        else:
            logger.error("Failed to get free quota. Retrying in 60s...")
        time.sleep(60)


def updatekey():
    with open(args.config, encoding="utf-8") as f:
        conf = toml.load(f)

    headers = {
        "Content-Type": "application/json; charset=UTF-8",
        "Host": "api.cloudflareclient.com",
        "User-Agent": "okhttp/3.12.1",
        "authorization": f"Bearer {conf['access_token']}",
    }

    logger.info("Updating device info...")
    res = requests.patch(f"{url}/{conf['device_id']}", headers=headers, timeout=10)
    if res.status_code == 200:
        logger.info("Update OK")
    else:
        logger.error("Update Failed: status_code=%d", res.status_code)


def checkmode():
    res = requests.get("https://www.cloudflare.com/cdn-cgi/trace", timeout=10)
    warp_mode = re.search(r"warp=([\w]+)", res.text).group(1)
    return warp_mode


if __name__ == "__main__":
    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)
    if args.verbose:
        logger.setLevel(logging.INFO)
    if args.commands == "run":
        getquota()
    elif args.commands == "update":
        updatekey()
